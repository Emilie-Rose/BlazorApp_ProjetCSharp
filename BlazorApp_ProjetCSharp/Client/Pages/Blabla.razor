@page "/Blabla"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Blabla</PageTitle>

<h1>Fil de conversation!</h1>

@if (!_isChatting)
{
    <p>
        Entrez votre nom pour commencer la discussion :
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>


    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span class="emoji"><b>@_username</b> est connecté(e)! &#128526;</span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Déconnexion</button>
    </div>
    // display messages
<div id="scrollbox">
    @foreach (var item in _messages)
    {
        @if (item.IsInfo)
        {
            <div class="alert alert-info">@item.Body</div>
        }
        else
        {
            <div class="@item.CSS "><b>@item.Username</b> : @item.Body</div>
        }
    }
    <hr />
    <textarea class="form-control" rows="2" placeholder="Ecrivez votre message ici ... ou pas!!!!!" @bind="@_newMessage"></textarea>
    <br />
    <button class="btn btn-warning" @onclick="@(() => SendAsync(_newMessage))">Envoi</button>
    <hr />
</div>
    <button type="button" class="btn btn-outline-secondary" @onclick="@Fermetureconsole"><span class="oi oi-chat" aria-hidden="true"></span> Fermer la console</button>
    <button type="button" class="btn btn-outline-primary" @onclick="@CreerPDF"><span class="oi oi-chat" aria-hidden="true"></span> PDF</button>
     

}

@code{

    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string? _username;

    // on-screen message
    private string? _message;

    // new message input
    private string? _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();


    private string? _hubUrl;
    private HubConnection _hubConnection;


    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Attention! Vous avez oublié d'entrer votre nom ...";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + "/chathub";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("ReceiveMessage", BroadcastMessage);

            await _hubConnection.StartAsync();


            await SendAsync($"[Info] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }
    private async Task Fermetureconsole()
    {
        // voir f° tchat , faire appparaitre le bouton de fermeture s'il y a 1 tchat (serveur/client)
        // pour console:

        await SendAsync("exit");
        // SendAsync(_newMessage)
    }

    private async Task CreerPDF()
    {
        // voir f° tchat , faire appparaitre le bouton de fermeture s'il y a 1 tchat (serveur/client)
        // pour console:

        await SendAsync(_newMessage + " - PDF (on vient de créer un PDF)");
        // SendAsync(_newMessage)
    }



    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Info] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("SendMessage", _username, message);
            _newMessage = string.Empty;

        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsInfo => Body.StartsWith("[Info]");

        public string CSS => Mine ? "sent" : "received";
    }
}
