@page "/HubCom"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable


<PageTitle>Hub de communication</PageTitle>


@*<div class="form-group">
        <label>
            Pseudo:
            <input @bind="username" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="message" size="50" />
        </label>
    </div>*@

<div class="input-group mb-3">
    <input @bind="username" type="text" class="form-control rounded-pill" placeholder="Pseudo" aria-label="Username" aria-describedby="basic-addon1">
</div>

<div class="input-group mb-3">
    <input @bind="message" type="text" class="form-control rounded-pill" placeholder="Message" aria-label="Username" aria-describedby="basic-addon1">
</div>

<button @onclick="Send" class="rounded-pill" disabled="@(!IsConnected)">Ok</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? username;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            var encodedMsg = $"{username}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", username, message);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}